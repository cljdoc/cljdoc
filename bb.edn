{:min-bb-version "1.3.184"
 :paths ["." "script"]
 :deps {lread/status-line {:git/url "https://github.com/lread/status-line.git"
                           :sha "cf44c15f30ea3867227fa61ceb823e5e942c707f"}
        dev.nubank/docopt {:mvn/version "0.6.1-fix7"}
        etaoin/etaoin {:mvn/version "1.1.43"}
        io.github.borkdude/unused-deps {:git/sha "c6673b5549d02fa131d21b61695e283b18124b59"}
        org.clj-commons/pretty {:mvn/version "3.6.7"}}
 :pods {org.babashka/fswatcher {:version "0.0.7"}}
 :tasks
 {;; setup
  :requires ([babashka.fs :as fs]
             [babashka.process :as p]
             [clojure.string :as str]
             [build-shared :as bs]
             [lread.status-line :as status]
             [version])
  :enter (let [{:keys [name task-decoration] :as f} (current-task)]
           (when-not (= :none task-decoration)
             (status/line :head "TASK %s" name)))
  :leave (let [{:keys [name task-decoration] :as f} (current-task)]
           (when-not (= :none task-decoration)
             (status/line :detail "\nTASK %s done." name)))

  ;; commands
  clean
  {:doc "delete all build work"
   :task (do
           (println "Deleting (d=deleted -=did not exist)")
           (run! (fn [d]
                   (println (format "[%s] %s"
                                    (if (fs/exists? d) "d" "-")
                                    d))
                   (fs/delete-tree d))
                 ["target"
                  "resources-compiled"
                  ".cpcache"
                  "modules/deploy/.cpcache"
                  "test-data/server"
                  "test-data/cli"]))}
  download-deps
  {:doc "download clojure deps"
   :task (clojure "-T:build download-deps")}
  dev
  {:doc "fire up a REPL for dev"
   :depends [compile-js compile-java]
   :task (shell "clj -M:cli:test:nrepl")}
  flowstorm
  {:doc "fire up a REPL for dev with Flowstorm"
   :depends [compile-js compile-java]
   :task (shell "clj -M:cli:test:flowstorm:nrepl")}
  clerk
  {:doc "fire up a REPL for with clerk support"
   :depends [compile-java]
   :task (shell "clj -M:cli:test:clerk:nrepl")}
  deps-js
  {:doc "bring down js deps"
   :task (if (seq (fs/modified-since "node_modules" ["package-lock.json"]))
           (shell "npm ci")
           (println "Skipped npm ci: package-lock.json older than node_modules"))}
  compile-js
  {:doc "compile front end sources"
   :depends [deps-js]
   :requires [compile-js]
   :task (let [out-dir "resources-compiled/public/out"]
           (if (seq (fs/modified-since out-dir ["resources/public" "front-end"
                                                "script/compile_js.clj"]))
             (compile-js/-main)
             (println "Skipped: JS assets already compiled to" out-dir)))}
  compile-js-watch
  {:doc "compile front end sources and auto-recompile on changes"
   :depends [deps-js]
   :requires [compile-js]
   :task (compile-js/-main "--watch")}
  compile-java
  {:doc "Compile java sources"
   :task (if (seq (fs/modified-since bs/class-dir (fs/glob "." "src/**.java")))
           (clojure "-T:build" "compile-java")
           (println "Java sources already compiled to" bs/class-dir))}
  server
  {:doc "Launch cljdoc server"
   :depends [compile-js compile-java]
   :task (apply clojure "-M:cli run" *command-line-args*)}
  ingest
  {:doc "Ingest docs locally for testing"
   :depends [compile-js compile-java]
   :task (apply clojure "-M:cli ingest" *command-line-args*)}
  offline-bundle
  {:doc "Create offline bundle for built lib"
   :depends [compile-js compile-java]
   :task (apply clojure "-M:cli offline-bundle" *command-line-args*)}
  test
  {:doc "Run tests"
   :depends [compile-js compile-java]
   :task (apply clojure "-M:test" *command-line-args*)}
  lint
  {:doc "[--rebuild] lint source code using clj-kondo"
   :task lint/-main}
  eastwood
  {:doc "lint source code using eastwood"
   :depends [compile-java]
   :task (clojure "-M:test:eastwood")}
  code-format
  {:doc "(check|fix) check whitespace formatting"
   :task code-format/-main}
  current-version
  {:doc "print current version"
   :task-decoration :none ;; some users might want us raw output
   :task version/-main}
  package
  {:doc "Zip up cljdoc for docker"
   :requires [package]
   ;; this check supports current CI job pipeline which relies on not having to recreate cljdoc.zip
   :task (if (fs/exists? "target/cljdoc.zip")
           (println "Skipped: target/cljdoc.zip exists")
           (do
             (run 'compile-js)
             (run 'compile-java)
             (apply package/-main *command-line-args*)))}
  docker-image
  {:doc "Create docker image"
   :depends [package]
   :task (shell {:dir "ops/docker"}
                "bb image.clj" (fs/absolutize "target/build/cljdoc.zip") (version/version))}
  outdated
  {:doc "report on outdated Clojure and JavaScript dependencies"
   :depends [deps-js]
   :task outdated/-main}
  doc-update-readme
  {:doc "honour our contributors in README"
   :task doc-update-readme/-main}
  check-contributors
  {:doc "who'd we miss?"
   :task check-contributors/-main}
  unused-deps
  {:doc "find unused dependencies"
   :requires ([clj-commons.format.table :as table])
   :task (let [;; manually update explanations as needed
               explanations {'org.asciidoctor/asciidoctorj "actual API is in dep org.asciidoctor/asciidoctorj-api which we do not explicity depend on"
                             'dev.weavejester/ragtime "ragtime API is in its dependencies"}
               unused-deps (->> (exec 'borkdude.unused-deps/unused-deps)
                                :unused-deps
                                sort
                                (mapv (fn [d] (-> {:dep (str d)}
                                                  (assoc :explanation (get explanations (first d)))))))]
           (status/line :detail "Dependencies that do not seem to be referenced by code")
           (status/line :detail "NOTE: Update explanation in bb.edn as you see fit")
           (status/line :detail "")
      (table/print-table [{:key :dep         :title-align :left :title "Dependency"  :align :left}
                          {:key :explanation :title-align :left :title "Explanation" :align :left}]
                         unused-deps)
      (status/line :detail "Total unused deps with no explanation: %d" (count (filter (fn [r] (-> r :explanation nil?)) unused-deps))))}
  nvd-scan
  {:doc "Scan Clojure deps for vulnerabilities"
   :task (shell {:dir "./modules/nvd-scan"} "bb nvd-scan")}

  deploy
  {:doc "ops: Deploy to Production (run by CircleCI)"
   :task (let [cljdoc-version (-> (shell {:out :string} "bb current-version") :out str/trim)]
           (status/line :detail "Deploying cljdoc version %s" cljdoc-version)
           (apply shell {:dir "ops/exoscale/deploy"}
                  "clojure -M -m cljdoc.deploy deploy -t" cljdoc-version
                  *command-line-args*))}}}
