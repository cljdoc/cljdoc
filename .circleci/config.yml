# Clojure CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-clojure/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/clojure:tools-deps-1.9.0.394-node
        # https://discuss.circleci.com/t/builds-getting-killed-with-vague-message-received-signal-killed/10214/9
        command: "/bin/bash"

    working_directory: ~/repo

    steps:
      - checkout

      - run: curl -fsSL https://raw.githubusercontent.com/cljdoc/cljdoc/master/script/verify-cljdoc-edn | bash -s doc/cljdoc.edn

      - restore_cache:
          keys:
            - v1-npm-dependencies-{{ checksum "package-lock.json" }}
            - v1-npm-dependencies- # fallback if cache not found

      - run: npm ci
      - run: ./script/package

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "deps.edn" }}
            - v1-dependencies- # fallback if cache not found

      - run: clojure -Spath

      - run: ./script/lint.sh

      - run: ./script/cljdoc ingest --project bidi --version 2.1.3
      - run: ./.circleci/run_if_changed.sh modules/analysis-runner/ "cd modules/analysis-runner/; clojure extended-test.clj"

      - run: clojure -A:test

      - persist_to_workspace:
          root: .
          paths:
            - target

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "deps.edn" }}
      - save_cache:
          paths:
            - ./node_modules
          key: v1-npm-dependencies-{{ checksum "package-lock.json" }}

  prettier:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-dependencies-{{ checksum "package-lock.json" }}
      - run: npm ci
      - run: npm run lint

  publish-zip-build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - attach_workspace:
          at: workspace
      - run: ls workspace
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Set AWS env vars
          # vars are coming from terraform setup
          command: |
            echo 'export AWS_ACCESS_KEY_ID=$RELEASES_BUCKET_ACCESS_KEY' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=$RELEASES_BUCKET_SECRET_KEY' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Deploy to S3
          command: aws s3 sync workspace/target s3://$RELEASES_BUCKET_NAME/build-$CIRCLE_SHA1/ --delete

  publish-docker:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      # because target/ has been put into place `make image` can be
      # ran without running ./script/package (which would require npm)
      - run: cd ops/docker && make image
      - run: docker push cljdoc/cljdoc

  # This assumes that an SSH key has been added to the CircleCI build
  # and it's public key has been copied to ~/.ssh/authorized_keys on
  # the production machine:
  # cat ~/.ssh/cljdoc_deploy.pub | ssh root@cljdoc.org 'cat >> .ssh/authorized_keys'
  deploy-to-nomad:
    docker:
      - image: circleci/clojure:tools-deps-1.9.0.394-node
        command: "/bin/bash"
    steps:
      - add_ssh_keys:
          fingerprints:
            - "75:fb:98:1f:f6:21:7f:bf:cc:c9:0e:b2:9e:be:5c:e8"
      - checkout
      - run: >
          cd modules/deploy &&
          clojure -m cljdoc.deploy deploy -t $(./../../script/version.sh) --nomad-ip $NOMAD_IP -k ~/.ssh/id_rsa_75fb981ff6217fbfccc90eb29ebe5ce8

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - prettier
      - publish-docker:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - publish-zip-build:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy-to-nomad:
          requires:
            - build
            - publish-docker
          filters:
            branches:
              only:
                - master
