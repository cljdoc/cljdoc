version: 2.1

aliases:
  - &clojure_image
    - image: clojure:temurin-21-tools-deps-jammy

  - &restore_clojure_cache
    restore_cache:
      name: Restore clojure cache
      keys:
        - v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "ops/exoscale/deploy/deps.edn" }}-{{ checksum "bb.edn" }}
        - v1-dependencies-

  - &save_clojure_cache
    save_cache:
      name: Save clojure cache
      paths:
        - ~/.m2
        - ~/.gitlibs
      key: v1-dependencies-{{ checksum "deps.edn" }}-{{ checksum "ops/exoscale/deploy/deps.edn" }}-{{ checksum "bb.edn" }}

  - &restore_npm_cache
    restore_cache:
      name: Save npm cache
      keys:
        - v1-npm-dependencies-{{ checksum "package-lock.json" }}

  - &save_npm_cache
    save_cache:
      name: Restore npm cache
      paths:
        - ./node_modules
      key: v1-npm-dependencies-{{ checksum "package-lock.json" }}

  - &bb_install
    run:
      name: Install bb
      command: |
        if [ ! -w "/usr/local/bin" ]; then
          SUDO='sudo'
        else
          SUDO=''
        fi
        $SUDO bash < <(curl -s https://raw.githubusercontent.com/babashka/babashka/master/install)

  - &npm_deps_install
    run:
      name: Install JavaScript Depedencies
      command: npm ci

  - &clojure_deps_download
    run:
      name: Bring Down Clojure deps
      command: bb download-deps

orbs:
  node: circleci/node@7.0.0

jobs:
  #
  # build: cache-deps
  #
  cache-deps:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_clojure_cache
      - *bb_install
      - *clojure_deps_download
      - *save_clojure_cache

  #
  # build: back-end-checks
  #
  back-end-checks:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_clojure_cache
      - run:
          name: Validate our own cljdoc.edn
          command: curl -fsSL https://raw.githubusercontent.com/cljdoc/cljdoc/master/script/verify-cljdoc-edn | bash -s doc/cljdoc.edn
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
            java --version
            clojure --version
            bb --version

      - run:
          name: Lint with clj-kondo
          command: bb lint

      - run:
          name: Code Style Check
          command: bb code-format check

  #
  # build: back-end-eastwood
  #
  back-end-eastwood:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_clojure_cache
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
            java --version
            clojure --version
            bb --version

      - run:
          name: Lint with eastwood
          command: bb eastwood

  #
  # build: front-end-checks
  #
  front-end-checks:
    docker: *clojure_image

    steps:
      - checkout
      - *restore_clojure_cache

      - node/install
      - *restore_npm_cache
      - *bb_install
      - *npm_deps_install

      - run:
          name: Report Tools Versions
          command: |
            node --version
            npx tsc --version
            bb --version

      - run:
          name: Lint Front End Source Format
          command: bb code-format-js

      - run:
          name: Compile TypeScript to Check for Issues
          command: bb lint-js

      - run:
          name: Run eslint
          command: bb eslint

      - *save_npm_cache

  #
  # build: test
  #
  test-unit:
    docker: *clojure_image

    steps:
      - checkout
      - node/install
      - run:
          name: Install extra tools
          command: apt update && apt install -y zstd

      - *restore_clojure_cache
      - *restore_npm_cache
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
           node --version
           java --version
           clojure --version
           bb --version

      - *npm_deps_install

      - run:
          name: Run Tests
          command: bb test --skip cljdoc.integration-test

  #
  # build: test-integration
  #
  test-integration:
    docker: *clojure_image

    steps:
      - checkout
      - node/install

      - *restore_clojure_cache
      - *restore_npm_cache
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
           node --version
           java --version
           clojure --version
           bb --version

      - *npm_deps_install

      - run:
          name: Run Tests
          command: bb test --focus cljdoc.integration-test

      - *save_npm_cache

  #
  # build: test-ingest
  #
  test-ingest:
    docker: *clojure_image

    steps:
      - checkout

      - *restore_clojure_cache
      - *bb_install

      - run:
          name: Report Tools Versions
          command: |
           java --version
           clojure --version
           bb --version

      - run:
          name: Build Docs for Sample Library
          command: bb ingest --project bidi --version 2.1.3

  #
  # build: package, output used by:
  # - publish-docker
  #
  package:
    docker: *clojure_image

    steps:
      - checkout
      - node/install
      - run:
          name: Install extra tools
          command: apt update && apt install -y zip

      - *restore_clojure_cache
      - *restore_npm_cache
      - *bb_install
      - *npm_deps_install

      - run:
          name: Report Tools Versions
          command: |
            java --version
            bb --version
            node --version

      - run:
          name: Package cljdoc
          command: bb package

      # used by publish-docker
      - persist_to_workspace:
          root: .
          paths:
            - target

      - *save_npm_cache
  #
  # build - used later in workflow to group all build jobs
  #
  build:
    docker:
      - image: alpine
    steps:
      - run: echo build done

  #
  # deploy: make and image and publish to docker
  # (relies on output saved by package)
  #
  publish-docker:
    machine:
      image: default
    steps:
      - checkout
      # from package job
      - attach_workspace:
          at: .

      - *bb_install

      - run:
          name: Tools Versions
          command: |
            java --version
            bb --version
            docker --version

      # because target/ has been put into place `make image` can be
      # run without running ./script/package (which would require npm)
      - run:
          name: Docker Create Image
          command: bb docker-image
      - run:
          name: Docker Login
          command: echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: Docker Push Image
          command: docker push --all-tags cljdoc/cljdoc

  # This assumes that an SSH key has been added to the CircleCI build
  # and it's public key has been copied to ~/.ssh/authorized_keys on
  # the production machine:
  # cat ~/.ssh/cljdoc_deploy.pub | ssh root@cljdoc.org 'cat >> .ssh/authorized_keys'
  deploy-prod:
    docker: *clojure_image

    steps:
      - add_ssh_keys:
          fingerprints:
            - "21:c6:60:7b:93:f2:24:6b:1f:76:1d:98:47:af:05:cb"

      - checkout

      - *restore_clojure_cache
      - *bb_install

      - run:
          name: Tools Versions
          command: |
            java --version
            clojure --version
            bb --version

      - run:
          name: Deploy to Production
          command: |
            bb deploy --nomad-ip $EXO_NOMAD_IP -u $SSH_USER -k ~/.ssh/id_rsa_21c6607b93f2246b1f761d9847af05cb

workflows:
  build-and-deploy:
    jobs:
      - cache-deps
      - front-end-checks:
          requires:
            - cache-deps
      - back-end-checks:
          requires:
            - cache-deps
      - back-end-eastwood:
          requires:
            - cache-deps
      - test-unit:
          requires:
            - cache-deps
      - test-integration:
          requires:
            - cache-deps
      - test-ingest:
          requires:
            - cache-deps
      - package
      - build:
          requires:
            - front-end-checks
            - back-end-checks
            - back-end-eastwood
            - test-unit
            - test-integration
            - test-ingest
            - package
      - publish-docker:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy-prod:
          requires:
            - build
            - publish-docker
          filters:
            branches:
              only:
                - master
